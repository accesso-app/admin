// Accesso App Admin API. 0.1.0
// ---
// This file is automatically generated by openapi with preset effector-openapi-preset
// Do not edit this file directly. Instead open openapi config file and follow the link in "file"
import { createEffect } from 'effector';
import * as typed from 'typed-contracts';
import { requestFx } from './request';

//#region prebuilt code
const custom = { any: (valueName: string, value: unknown): any => value };

export type GenericErrors =
  | {
      status: 'unexpected';
      error: Error;
    }
  | {
      status: 'unknown_status';
      error: { status: number; body: unknown };
    }
  | {
      status: 'validation_error';
      error: typed.ValidationError;
    };

type ErrorCodes = 400 | 401 | 402 | 403 | 404 | 405 | 406 | 500 | 501 | 502 | 503 | 505;
/**
 * @throws
 */
function parseByStatus<
  Variants extends string,
  Contracts extends Record<number, [Variants, typed.Contract<any>]>,
  Result extends {
    [Code in keyof Contracts]: Contracts[Code] extends [infer Status, typed.Contract<infer T>]
      ? { status: Status; answer: T }
      : never;
  },
>(
  name: string,
  response: { status: number; body?: unknown },
  contracts: Contracts,
): Result[Exclude<keyof Result, ErrorCodes>] {
  const contractObject = contracts[response.status];
  if (!contractObject) {
    throw {
      status: 'unknown_status',
      error: {
        status: response.status,
        body: response.body,
      },
    };
  }
  const [status, contract] = contractObject;
  const answer = contract(name, response.body);
  if (answer instanceof typed.ValidationError) {
    throw { status: 'validation_error', error: answer };
  }
  if (response.status >= 400) {
    throw { status, error: answer };
  }
  return { status, answer } as Result[Exclude<keyof Result, ErrorCodes>];
}

//#endregion prebuilt code/* --- */
//#region applicationsUserAdd
type ApplicationsUserAdd = {
  body: {
    /* The identifier of application. */
    applicationId: string;
    userId: string;
  };
};

/* User was added successful. */
export const applicationsUserAddOk = typed.object({
  code: typed.string.optional,
});
export type ApplicationsUserAddDone = {
  status: 'ok';
  answer: typed.Get<typeof applicationsUserAddOk>;
};

/* Happens when something went wrong after attemp to connect user with application */
export const applicationsUserAddBadRequest = typed.object({
  /* Possible errors:
   *
   * `access_denied` — This error occures when user's session was expired | user doesn't have enough permission | or user unauthorized.
   *
   * `invalid_request` — Something was wrong with user request.
   *
   * `application_not_found` — Occure when application_id was not found.
   *
   * `user_not_found` — Occure when user_id was not found. */
  code: typed.union('access_denied', 'invalid_request', 'application_not_found', 'user_not_found'),
});

/* Something went wrong */
export const applicationsUserAddInternalServerError = typed.nul;
export type ApplicationsUserAddFail =
  | {
      status: 'bad_request';
      error: typed.Get<typeof applicationsUserAddBadRequest>;
    }
  | {
      status: 'internal_server_error';
      error: typed.Get<typeof applicationsUserAddInternalServerError>;
    }
  | GenericErrors;

/* Add user to application */
export const applicationsUserAdd = createEffect<
  ApplicationsUserAdd,
  ApplicationsUserAddDone,
  ApplicationsUserAddFail
>({
  async handler({ body }) {
    const name = 'applicationsUserAdd.body';
    const response = await requestFx({
      path: '/applications/user.add',
      method: 'POST',
      body,
    });
    return parseByStatus(name, response, {
      200: ['ok', applicationsUserAddOk],
      400: ['bad_request', applicationsUserAddBadRequest],
      500: ['internal_server_error', applicationsUserAddInternalServerError],
    });
  },
});
//#endregion applicationsUserAdd

/* --- */
//#region applicationsSecretRegenerate
type ApplicationsSecretRegenerate = {
  body: {
    /* ID if the application need to regenerate the secret key. */
    applicationId: string;
  };
};

/* New app secret was generated. */
export const applicationsSecretRegenerateOk = typed.object({
  /* New secret key */
  secretKey: typed.string,
});
export type ApplicationsSecretRegenerateDone = {
  status: 'ok';
  answer: typed.Get<typeof applicationsSecretRegenerateOk>;
};

/* Happens when something went wrong after attemp to regenerate application key */
export const applicationsSecretRegenerateBadRequest = typed.object({
  /* Possible errors:
   *
   * `access_denied` -- This error occures when user's session was expired | user doesn't have enough permission | or user unauthorized.
   *
   * `invalid_request` -- Something was wrong with user request. */
  code: typed.union('access_denied', 'invalid_request'),
});

/* Something went wrong */
export const applicationsSecretRegenerateInternalServerError = typed.nul;
export type ApplicationsSecretRegenerateFail =
  | {
      status: 'bad_request';
      error: typed.Get<typeof applicationsSecretRegenerateBadRequest>;
    }
  | {
      status: 'internal_server_error';
      error: typed.Get<typeof applicationsSecretRegenerateInternalServerError>;
    }
  | GenericErrors;

/* create new secret key */
export const applicationsSecretRegenerate = createEffect<
  ApplicationsSecretRegenerate,
  ApplicationsSecretRegenerateDone,
  ApplicationsSecretRegenerateFail
>({
  async handler({ body }) {
    const name = 'applicationsSecretRegenerate.body';
    const response = await requestFx({
      path: '/applications/secret.regenerate',
      method: 'POST',
      body,
    });
    return parseByStatus(name, response, {
      200: ['ok', applicationsSecretRegenerateOk],
      400: ['bad_request', applicationsSecretRegenerateBadRequest],
      500: ['internal_server_error', applicationsSecretRegenerateInternalServerError],
    });
  },
});
//#endregion applicationsSecretRegenerate

/* --- */
//#region applicationsUserRemove
type ApplicationsUserRemove = {
  body: {
    /* The identifier of your app. */
    applicationId: string;
    userId: string;
  };
};

/* User was deleted successful. */
export const applicationsUserRemoveOk = typed.object({});
export type ApplicationsUserRemoveDone = {
  status: 'ok';
  answer: typed.Get<typeof applicationsUserRemoveOk>;
};

/* Happens when something went wrong after attemp to delete application */
export const applicationsUserRemoveBadRequest = typed.object({
  /* Possible errors:
   *
   * `access_denied` — This error occures when user's session was expired | user doesn't have enough permission | or user unauthorized.
   *
   * `invalid_request` — Something was wrong with user request.
   *
   * `application_not_found` — Occure when application_id was not found.
   *
   * `user_not_found` — Occure when user_id was not found. */
  code: typed.union('access_denied', 'invalid_request', 'application_not_found', 'user_not_found'),
});

/* Something went wrong */
export const applicationsUserRemoveInternalServerError = typed.nul;
export type ApplicationsUserRemoveFail =
  | {
      status: 'bad_request';
      error: typed.Get<typeof applicationsUserRemoveBadRequest>;
    }
  | {
      status: 'internal_server_error';
      error: typed.Get<typeof applicationsUserRemoveInternalServerError>;
    }
  | GenericErrors;

/* Remove user from application */
export const applicationsUserRemove = createEffect<
  ApplicationsUserRemove,
  ApplicationsUserRemoveDone,
  ApplicationsUserRemoveFail
>({
  async handler({ body }) {
    const name = 'applicationsUserRemove.body';
    const response = await requestFx({
      path: '/applications/user.remove',
      method: 'POST',
      body,
    });
    return parseByStatus(name, response, {
      200: ['ok', applicationsUserRemoveOk],
      400: ['bad_request', applicationsUserRemoveBadRequest],
      500: ['internal_server_error', applicationsUserRemoveInternalServerError],
    });
  },
});
//#endregion applicationsUserRemove

/* --- */
//#region applicationsCreate
type ApplicationsCreate = {
  body: {
    title: string;
    redirectUri?: string;
    allowRegistrations: boolean;
  };
};

/* New app was created and attached to user. */
export const applicationsCreateOk = typed.object({
  applicationId: typed.string,
});
export type ApplicationsCreateDone = {
  status: 'ok';
  answer: typed.Get<typeof applicationsCreateOk>;
};

/* Happens when something went wrong after attemp to register new application. */
export const applicationsCreateBadRequest = typed.object({
  error: typed.union('invalid_payload', 'redirect_uri_claimed'),
});

/* Something went wrong */
export const applicationsCreateInternalServerError = typed.nul;
export type ApplicationsCreateFail =
  | {
      status: 'bad_request';
      error: typed.Get<typeof applicationsCreateBadRequest>;
    }
  | {
      status: 'internal_server_error';
      error: typed.Get<typeof applicationsCreateInternalServerError>;
    }
  | GenericErrors;

/* Create new applications */
export const applicationsCreate = createEffect<
  ApplicationsCreate,
  ApplicationsCreateDone,
  ApplicationsCreateFail
>({
  async handler({ body }) {
    const name = 'applicationsCreate.body';
    const response = await requestFx({
      path: '/applications.create',
      method: 'POST',
      body,
    });
    return parseByStatus(name, response, {
      200: ['ok', applicationsCreateOk],
      400: ['bad_request', applicationsCreateBadRequest],
      500: ['internal_server_error', applicationsCreateInternalServerError],
    });
  },
});
//#endregion applicationsCreate

/* --- */
//#region sessionCreate
type SessionCreate = {
  body: {
    /* Current user in a session */
    user: {
      firstName: string;
      lastName: string;
    };
  };
};

/* Session created, token wrote to cookies */
export const sessionCreateCreated = typed.object({
  firstName: typed.string,
  lastName: typed.string,
});
export type SessionCreateDone = {
  status: 'created';
  answer: typed.Get<typeof sessionCreateCreated>;
};

/* Login failed */
export const sessionCreateBadRequest = typed.object({
  error: typed.union('invalid_credentials', 'invalid_form', 'invalid_payload'),
});

/* Something went wrong */
export const sessionCreateInternalServerError = typed.nul;
export type SessionCreateFail =
  | {
      status: 'bad_request';
      error: typed.Get<typeof sessionCreateBadRequest>;
    }
  | {
      status: 'internal_server_error';
      error: typed.Get<typeof sessionCreateInternalServerError>;
    }
  | GenericErrors;

/* Login and create new session token */
export const sessionCreate = createEffect<SessionCreate, SessionCreateDone, SessionCreateFail>({
  async handler({ body }) {
    const name = 'sessionCreate.body';
    const response = await requestFx({
      path: '/session/create',
      method: 'POST',
      body,
    });
    return parseByStatus(name, response, {
      201: ['created', sessionCreateCreated],
      400: ['bad_request', sessionCreateBadRequest],
      500: ['internal_server_error', sessionCreateInternalServerError],
    });
  },
});
//#endregion sessionCreate

/* --- */
//#region sessionGet
type SessionGet = {};

/* Session exists */
export const sessionGetOk = typed.object({
  /* Current user in a session */
  user: typed.object({
    firstName: typed.string,
    lastName: typed.string,
  }),
});
export type SessionGetDone = {
  status: 'ok';
  answer: typed.Get<typeof sessionGetOk>;
};

/* User not authorized */
export const sessionGetUnauthorized = typed.nul;

/* Something went wrong */
export const sessionGetInternalServerError = typed.nul;
export type SessionGetFail =
  | {
      status: 'unauthorized';
      error: typed.Get<typeof sessionGetUnauthorized>;
    }
  | {
      status: 'internal_server_error';
      error: typed.Get<typeof sessionGetInternalServerError>;
    }
  | GenericErrors;

/* Read session token and show current session. Authenticated checked by session-token cookie */
export const sessionGet = createEffect<SessionGet, SessionGetDone, SessionGetFail>({
  async handler() {
    const name = 'sessionGet.body';
    const response = await requestFx({
      path: '/session/get',
      method: 'POST',
    });
    return parseByStatus(name, response, {
      200: ['ok', sessionGetOk],
      401: ['unauthorized', sessionGetUnauthorized],
      500: ['internal_server_error', sessionGetInternalServerError],
    });
  },
});
//#endregion sessionGet

/* --- */
//#region sessionDelete
type SessionDelete = {
  body: {
    deleteAllSessions: boolean;
  };
};

/* session deleted */
export const sessionDeleteOk = typed.nul;
export type SessionDeleteDone = {
  status: 'ok';
  answer: typed.Get<typeof sessionDeleteOk>;
};

/* failed to delete session */
export const sessionDeleteBadRequest = typed.object({
  /* Possible errors:
   *
   * `access_denied` — This error occures when user's session was expired | user doesn't have enough permission | or user unauthorized.<br>
   * `invalid_request` — Something was wrong with user request. */
  code: typed.union('access_denied', 'invalid_request'),
});

/* User not authorized */
export const sessionDeleteUnauthorized = typed.nul;

/* Something went wrong */
export const sessionDeleteInternalServerError = typed.nul;
export type SessionDeleteFail =
  | {
      status: 'bad_request';
      error: typed.Get<typeof sessionDeleteBadRequest>;
    }
  | {
      status: 'unauthorized';
      error: typed.Get<typeof sessionDeleteUnauthorized>;
    }
  | {
      status: 'internal_server_error';
      error: typed.Get<typeof sessionDeleteInternalServerError>;
    }
  | GenericErrors;

/* Delete current or all sessions */
export const sessionDelete = createEffect<SessionDelete, SessionDeleteDone, SessionDeleteFail>({
  async handler({ body }) {
    const name = 'sessionDelete.body';
    const response = await requestFx({
      path: '/session/delete',
      method: 'POST',
      body,
    });
    return parseByStatus(name, response, {
      200: ['ok', sessionDeleteOk],
      400: ['bad_request', sessionDeleteBadRequest],
      401: ['unauthorized', sessionDeleteUnauthorized],
      500: ['internal_server_error', sessionDeleteInternalServerError],
    });
  },
});
//#endregion sessionDelete
